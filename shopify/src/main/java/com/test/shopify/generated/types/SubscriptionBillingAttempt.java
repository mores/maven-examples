package com.test.shopify.generated.types;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NONE
)
public class SubscriptionBillingAttempt implements com.test.shopify.generated.types.Node {
  /**
   * The date and time when the billing attempt was completed.
   */
  private OffsetDateTime completedAt;

  /**
   * The date and time when the billing attempt was created.
   */
  private OffsetDateTime createdAt;

  /**
   * A code corresponding to a payment error during processing.
   */
  private SubscriptionBillingAttemptErrorCode errorCode;

  /**
   * A message describing a payment error during processing.
   */
  private String errorMessage;

  /**
   * A globally-unique ID.
   */
  private String id;

  /**
   * A unique key generated by the client to avoid duplicate payments.
   */
  private String idempotencyKey;

  /**
   * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
   */
  private String nextActionUrl;

  /**
   * The result of this billing attempt if completed successfully.
   */
  private Order order;

  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  private OffsetDateTime originTime;

  /**
   * Whether the billing attempt is still processing.
   */
  private boolean ready;

  /**
   * The subscription contract.
   */
  private SubscriptionContract subscriptionContract;

  public SubscriptionBillingAttempt() {
  }

  /**
   * The date and time when the billing attempt was completed.
   */
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }

  /**
   * The date and time when the billing attempt was created.
   */
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * A code corresponding to a payment error during processing.
   */
  public SubscriptionBillingAttemptErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(SubscriptionBillingAttemptErrorCode errorCode) {
    this.errorCode = errorCode;
  }

  /**
   * A message describing a payment error during processing.
   */
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  /**
   * A globally-unique ID.
   */
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  /**
   * A unique key generated by the client to avoid duplicate payments.
   */
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  /**
   * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
   */
  public String getNextActionUrl() {
    return nextActionUrl;
  }

  public void setNextActionUrl(String nextActionUrl) {
    this.nextActionUrl = nextActionUrl;
  }

  /**
   * The result of this billing attempt if completed successfully.
   */
  public Order getOrder() {
    return order;
  }

  public void setOrder(Order order) {
    this.order = order;
  }

  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  public OffsetDateTime getOriginTime() {
    return originTime;
  }

  public void setOriginTime(OffsetDateTime originTime) {
    this.originTime = originTime;
  }

  /**
   * Whether the billing attempt is still processing.
   */
  public boolean getReady() {
    return ready;
  }

  public void setReady(boolean ready) {
    this.ready = ready;
  }

  /**
   * The subscription contract.
   */
  public SubscriptionContract getSubscriptionContract() {
    return subscriptionContract;
  }

  public void setSubscriptionContract(SubscriptionContract subscriptionContract) {
    this.subscriptionContract = subscriptionContract;
  }

  @Override
  public String toString() {
    return "SubscriptionBillingAttempt{completedAt='" + completedAt + "', createdAt='" + createdAt + "', errorCode='" + errorCode + "', errorMessage='" + errorMessage + "', id='" + id + "', idempotencyKey='" + idempotencyKey + "', nextActionUrl='" + nextActionUrl + "', order='" + order + "', originTime='" + originTime + "', ready='" + ready + "', subscriptionContract='" + subscriptionContract + "'}";
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    SubscriptionBillingAttempt that = (SubscriptionBillingAttempt) o;
    return Objects.equals(completedAt, that.completedAt) &&
        Objects.equals(createdAt, that.createdAt) &&
        Objects.equals(errorCode, that.errorCode) &&
        Objects.equals(errorMessage, that.errorMessage) &&
        Objects.equals(id, that.id) &&
        Objects.equals(idempotencyKey, that.idempotencyKey) &&
        Objects.equals(nextActionUrl, that.nextActionUrl) &&
        Objects.equals(order, that.order) &&
        Objects.equals(originTime, that.originTime) &&
        ready == that.ready &&
        Objects.equals(subscriptionContract, that.subscriptionContract);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedAt, createdAt, errorCode, errorMessage, id, idempotencyKey, nextActionUrl, order, originTime, ready, subscriptionContract);
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static class Builder {
    /**
     * The date and time when the billing attempt was completed.
     */
    private OffsetDateTime completedAt;

    /**
     * The date and time when the billing attempt was created.
     */
    private OffsetDateTime createdAt;

    /**
     * A code corresponding to a payment error during processing.
     */
    private SubscriptionBillingAttemptErrorCode errorCode;

    /**
     * A message describing a payment error during processing.
     */
    private String errorMessage;

    /**
     * A globally-unique ID.
     */
    private String id;

    /**
     * A unique key generated by the client to avoid duplicate payments.
     */
    private String idempotencyKey;

    /**
     * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
     */
    private String nextActionUrl;

    /**
     * The result of this billing attempt if completed successfully.
     */
    private Order order;

    /**
     * The date and time used to calculate fulfillment intervals for a billing attempt that
     * successfully completed after the current anchor date. To prevent fulfillment from being
     * pushed to the next anchor date, this field can override the billing attempt date.
     */
    private OffsetDateTime originTime;

    /**
     * Whether the billing attempt is still processing.
     */
    private boolean ready;

    /**
     * The subscription contract.
     */
    private SubscriptionContract subscriptionContract;

    public SubscriptionBillingAttempt build() {
      SubscriptionBillingAttempt result = new SubscriptionBillingAttempt();
      result.completedAt = this.completedAt;
      result.createdAt = this.createdAt;
      result.errorCode = this.errorCode;
      result.errorMessage = this.errorMessage;
      result.id = this.id;
      result.idempotencyKey = this.idempotencyKey;
      result.nextActionUrl = this.nextActionUrl;
      result.order = this.order;
      result.originTime = this.originTime;
      result.ready = this.ready;
      result.subscriptionContract = this.subscriptionContract;
      return result;
    }

    /**
     * The date and time when the billing attempt was completed.
     */
    public Builder completedAt(OffsetDateTime completedAt) {
      this.completedAt = completedAt;
      return this;
    }

    /**
     * The date and time when the billing attempt was created.
     */
    public Builder createdAt(OffsetDateTime createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    /**
     * A code corresponding to a payment error during processing.
     */
    public Builder errorCode(SubscriptionBillingAttemptErrorCode errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    /**
     * A message describing a payment error during processing.
     */
    public Builder errorMessage(String errorMessage) {
      this.errorMessage = errorMessage;
      return this;
    }

    /**
     * A globally-unique ID.
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * A unique key generated by the client to avoid duplicate payments.
     */
    public Builder idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    /**
     * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
     */
    public Builder nextActionUrl(String nextActionUrl) {
      this.nextActionUrl = nextActionUrl;
      return this;
    }

    /**
     * The result of this billing attempt if completed successfully.
     */
    public Builder order(Order order) {
      this.order = order;
      return this;
    }

    /**
     * The date and time used to calculate fulfillment intervals for a billing attempt that
     * successfully completed after the current anchor date. To prevent fulfillment from being
     * pushed to the next anchor date, this field can override the billing attempt date.
     */
    public Builder originTime(OffsetDateTime originTime) {
      this.originTime = originTime;
      return this;
    }

    /**
     * Whether the billing attempt is still processing.
     */
    public Builder ready(boolean ready) {
      this.ready = ready;
      return this;
    }

    /**
     * The subscription contract.
     */
    public Builder subscriptionContract(SubscriptionContract subscriptionContract) {
      this.subscriptionContract = subscriptionContract;
      return this;
    }
  }
}
