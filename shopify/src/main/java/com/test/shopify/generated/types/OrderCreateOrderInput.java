package com.test.shopify.generated.types;

import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;

/**
 * The input fields for creating an order.
 */
public class OrderCreateOrderInput {
  /**
   * The mailing address associated with the payment method. This address is an optional field that won't be
   *                available on orders that don't require a payment method.
   *   
   *               > Note:
   *               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
   *               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
   *               > then their name will be set to the first/last name from this address (if provided).
   */
  private MailingAddressInput billingAddress;

  /**
   * Whether the customer consented to receive email updates from the shop.
   */
  private Boolean buyerAcceptsMarketing = null;

  /**
   * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
   * when the order was closed. Returns null if the order isn't closed.
   */
  private OffsetDateTime closedAt;

  /**
   * The ID of the purchasing company's location for the order.
   */
  private String companyLocationId;

  /**
   * The shop-facing currency for the order. If not specified, then the shop's default currency is used.
   */
  private CurrencyCode currency;

  /**
   * A list of extra information that's added to the order. Appears in the
   * **Additional details** section of an order details page.
   */
  private List<OrderCreateCustomAttributeInput> customAttributes;

  /**
   * A discount code applied to the order.
   */
  private OrderCreateDiscountCodeInput discountCode;

  /**
   * A new customer email address for the order.
   *   
   *               > Note:
   *               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
   */
  private String email;

  /**
   * The financial status of the order. If not specified, then this will be derived
   * through the given transactions. Note that it's possible to specify a status
   * that doesn't match the given transactions and it will persist, but if an
   * operation later occurs on the order, the status may then be recalculated to
   * match the current state of transactions.
   */
  private OrderCreateFinancialStatus financialStatus;

  /**
   * The fulfillment to create for the order. This will apply to all line items.
   */
  private OrderCreateFulfillmentInput fulfillment;

  /**
   * The fulfillment status of the order. Will default to `unfulfilled` if not included.
   */
  private OrderCreateFulfillmentStatus fulfillmentStatus;

  /**
   * The line items to create for the order.
   */
  private List<OrderCreateLineItemInput> lineItems;

  /**
   * A list of metafields to add to the order.
   */
  private List<MetafieldInput> metafields;

  /**
   * The order name, generated by combining the `order_number` property with the
   * order prefix and suffix that are set in the merchant's [general
   * settings](https://www.shopify.com/admin/settings/general). This is different
   * from the `id` property, which is the ID of the order used by the API. This
   * field can also be set by the API to be any string value.
   */
  private String name;

  /**
   * The new contents for the note associated with the order.
   */
  private String note;

  /**
   * A new customer phone number for the order.
   */
  private String phone;

  /**
   * The purchase order number associated to this order.
   */
  private String poNumber;

  /**
   * The presentment currency that was used to display prices to the customer. This
   * must be specified if any presentment currencies are used in the order.
   */
  private CurrencyCode presentmentCurrency;

  /**
   * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
   * when an order was processed. This value is the date that appears on your
   * orders and that's used in the analytic reports. If you're importing orders
   * from an app or another platform, then you can set processed_at to a date and
   * time in the past to match when the original order was created.
   */
  private OffsetDateTime processedAt;

  /**
   * The website where the customer clicked a link to the shop.
   */
  private String referringSite;

  /**
   * The mailing address to where the order will be shipped.
   *   
   *               > Note:
   *               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
   *               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
   *               > then it will be set to the first/last name from this address (if provided).
   */
  private MailingAddressInput shippingAddress;

  /**
   * An array of objects, each of which details a shipping method used.
   */
  private List<OrderCreateShippingLineInput> shippingLines;

  /**
   * The ID of the order placed on the originating platform. This value doesn't
   * correspond to the Shopify ID that's generated from a completed draft.
   */
  private String sourceIdentifier;

  /**
   * The source of the checkout. To use this field for sales attribution, you must
   * register the channels that your app is managing. You can register the channels
   * that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
   * After you've submited your request, you need to wait for your request to be
   * processed by Shopify. You can find a list of your channels in the Partner
   * Dashboard, in your app's Marketplace extension. You can specify a handle as
   * the source_name value in your request.
   */
  private String sourceName;

  /**
   * A valid URL to the original order on the originating surface. This URL is
   * displayed to merchants on the Order Details page. If the URL is invalid, then
   * it won't be displayed.
   */
  private String sourceUrl;

  /**
   * A comma separated list of tags that have been added to the draft order.
   */
  private List<String> tags;

  /**
   * Whether taxes are included in the order subtotal.
   */
  private Boolean taxesIncluded = false;

  /**
   * An array of tax line objects, each of which details a tax applicable to the
   * order. When creating an order through the API, tax lines can be specified on
   * the order or the line items but not both. Tax lines specified on the order are
   * split across the _taxable_ line items in the created order.
   */
  private List<OrderCreateTaxLineInput> taxLines;

  /**
   * Whether this is a test order.
   */
  private Boolean test = false;

  /**
   * The payment transactions to create for the order.
   */
  private List<OrderCreateOrderTransactionInput> transactions;

  /**
   * The ID of the user logged into Shopify POS who processed the order, if applicable.
   */
  private String userId;

  public OrderCreateOrderInput() {
  }

  /**
   * The mailing address associated with the payment method. This address is an optional field that won't be
   *                available on orders that don't require a payment method.
   *   
   *               > Note:
   *               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
   *               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
   *               > then their name will be set to the first/last name from this address (if provided).
   */
  public MailingAddressInput getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(MailingAddressInput billingAddress) {
    this.billingAddress = billingAddress;
  }

  /**
   * Whether the customer consented to receive email updates from the shop.
   */
  public Boolean getBuyerAcceptsMarketing() {
    return buyerAcceptsMarketing;
  }

  public void setBuyerAcceptsMarketing(Boolean buyerAcceptsMarketing) {
    this.buyerAcceptsMarketing = buyerAcceptsMarketing;
  }

  /**
   * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
   * when the order was closed. Returns null if the order isn't closed.
   */
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }

  /**
   * The ID of the purchasing company's location for the order.
   */
  public String getCompanyLocationId() {
    return companyLocationId;
  }

  public void setCompanyLocationId(String companyLocationId) {
    this.companyLocationId = companyLocationId;
  }

  /**
   * The shop-facing currency for the order. If not specified, then the shop's default currency is used.
   */
  public CurrencyCode getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyCode currency) {
    this.currency = currency;
  }

  /**
   * A list of extra information that's added to the order. Appears in the
   * **Additional details** section of an order details page.
   */
  public List<OrderCreateCustomAttributeInput> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<OrderCreateCustomAttributeInput> customAttributes) {
    this.customAttributes = customAttributes;
  }

  /**
   * A discount code applied to the order.
   */
  public OrderCreateDiscountCodeInput getDiscountCode() {
    return discountCode;
  }

  public void setDiscountCode(OrderCreateDiscountCodeInput discountCode) {
    this.discountCode = discountCode;
  }

  /**
   * A new customer email address for the order.
   *   
   *               > Note:
   *               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
   */
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  /**
   * The financial status of the order. If not specified, then this will be derived
   * through the given transactions. Note that it's possible to specify a status
   * that doesn't match the given transactions and it will persist, but if an
   * operation later occurs on the order, the status may then be recalculated to
   * match the current state of transactions.
   */
  public OrderCreateFinancialStatus getFinancialStatus() {
    return financialStatus;
  }

  public void setFinancialStatus(OrderCreateFinancialStatus financialStatus) {
    this.financialStatus = financialStatus;
  }

  /**
   * The fulfillment to create for the order. This will apply to all line items.
   */
  public OrderCreateFulfillmentInput getFulfillment() {
    return fulfillment;
  }

  public void setFulfillment(OrderCreateFulfillmentInput fulfillment) {
    this.fulfillment = fulfillment;
  }

  /**
   * The fulfillment status of the order. Will default to `unfulfilled` if not included.
   */
  public OrderCreateFulfillmentStatus getFulfillmentStatus() {
    return fulfillmentStatus;
  }

  public void setFulfillmentStatus(OrderCreateFulfillmentStatus fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }

  /**
   * The line items to create for the order.
   */
  public List<OrderCreateLineItemInput> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderCreateLineItemInput> lineItems) {
    this.lineItems = lineItems;
  }

  /**
   * A list of metafields to add to the order.
   */
  public List<MetafieldInput> getMetafields() {
    return metafields;
  }

  public void setMetafields(List<MetafieldInput> metafields) {
    this.metafields = metafields;
  }

  /**
   * The order name, generated by combining the `order_number` property with the
   * order prefix and suffix that are set in the merchant's [general
   * settings](https://www.shopify.com/admin/settings/general). This is different
   * from the `id` property, which is the ID of the order used by the API. This
   * field can also be set by the API to be any string value.
   */
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  /**
   * The new contents for the note associated with the order.
   */
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  /**
   * A new customer phone number for the order.
   */
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  /**
   * The purchase order number associated to this order.
   */
  public String getPoNumber() {
    return poNumber;
  }

  public void setPoNumber(String poNumber) {
    this.poNumber = poNumber;
  }

  /**
   * The presentment currency that was used to display prices to the customer. This
   * must be specified if any presentment currencies are used in the order.
   */
  public CurrencyCode getPresentmentCurrency() {
    return presentmentCurrency;
  }

  public void setPresentmentCurrency(CurrencyCode presentmentCurrency) {
    this.presentmentCurrency = presentmentCurrency;
  }

  /**
   * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
   * when an order was processed. This value is the date that appears on your
   * orders and that's used in the analytic reports. If you're importing orders
   * from an app or another platform, then you can set processed_at to a date and
   * time in the past to match when the original order was created.
   */
  public OffsetDateTime getProcessedAt() {
    return processedAt;
  }

  public void setProcessedAt(OffsetDateTime processedAt) {
    this.processedAt = processedAt;
  }

  /**
   * The website where the customer clicked a link to the shop.
   */
  public String getReferringSite() {
    return referringSite;
  }

  public void setReferringSite(String referringSite) {
    this.referringSite = referringSite;
  }

  /**
   * The mailing address to where the order will be shipped.
   *   
   *               > Note:
   *               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
   *               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
   *               > then it will be set to the first/last name from this address (if provided).
   */
  public MailingAddressInput getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(MailingAddressInput shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  /**
   * An array of objects, each of which details a shipping method used.
   */
  public List<OrderCreateShippingLineInput> getShippingLines() {
    return shippingLines;
  }

  public void setShippingLines(List<OrderCreateShippingLineInput> shippingLines) {
    this.shippingLines = shippingLines;
  }

  /**
   * The ID of the order placed on the originating platform. This value doesn't
   * correspond to the Shopify ID that's generated from a completed draft.
   */
  public String getSourceIdentifier() {
    return sourceIdentifier;
  }

  public void setSourceIdentifier(String sourceIdentifier) {
    this.sourceIdentifier = sourceIdentifier;
  }

  /**
   * The source of the checkout. To use this field for sales attribution, you must
   * register the channels that your app is managing. You can register the channels
   * that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
   * After you've submited your request, you need to wait for your request to be
   * processed by Shopify. You can find a list of your channels in the Partner
   * Dashboard, in your app's Marketplace extension. You can specify a handle as
   * the source_name value in your request.
   */
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }

  /**
   * A valid URL to the original order on the originating surface. This URL is
   * displayed to merchants on the Order Details page. If the URL is invalid, then
   * it won't be displayed.
   */
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }

  /**
   * A comma separated list of tags that have been added to the draft order.
   */
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  /**
   * Whether taxes are included in the order subtotal.
   */
  public Boolean getTaxesIncluded() {
    return taxesIncluded;
  }

  public void setTaxesIncluded(Boolean taxesIncluded) {
    this.taxesIncluded = taxesIncluded;
  }

  /**
   * An array of tax line objects, each of which details a tax applicable to the
   * order. When creating an order through the API, tax lines can be specified on
   * the order or the line items but not both. Tax lines specified on the order are
   * split across the _taxable_ line items in the created order.
   */
  public List<OrderCreateTaxLineInput> getTaxLines() {
    return taxLines;
  }

  public void setTaxLines(List<OrderCreateTaxLineInput> taxLines) {
    this.taxLines = taxLines;
  }

  /**
   * Whether this is a test order.
   */
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }

  /**
   * The payment transactions to create for the order.
   */
  public List<OrderCreateOrderTransactionInput> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<OrderCreateOrderTransactionInput> transactions) {
    this.transactions = transactions;
  }

  /**
   * The ID of the user logged into Shopify POS who processed the order, if applicable.
   */
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  @Override
  public String toString() {
    return "OrderCreateOrderInput{billingAddress='" + billingAddress + "', buyerAcceptsMarketing='" + buyerAcceptsMarketing + "', closedAt='" + closedAt + "', companyLocationId='" + companyLocationId + "', currency='" + currency + "', customAttributes='" + customAttributes + "', discountCode='" + discountCode + "', email='" + email + "', financialStatus='" + financialStatus + "', fulfillment='" + fulfillment + "', fulfillmentStatus='" + fulfillmentStatus + "', lineItems='" + lineItems + "', metafields='" + metafields + "', name='" + name + "', note='" + note + "', phone='" + phone + "', poNumber='" + poNumber + "', presentmentCurrency='" + presentmentCurrency + "', processedAt='" + processedAt + "', referringSite='" + referringSite + "', shippingAddress='" + shippingAddress + "', shippingLines='" + shippingLines + "', sourceIdentifier='" + sourceIdentifier + "', sourceName='" + sourceName + "', sourceUrl='" + sourceUrl + "', tags='" + tags + "', taxesIncluded='" + taxesIncluded + "', taxLines='" + taxLines + "', test='" + test + "', transactions='" + transactions + "', userId='" + userId + "'}";
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    OrderCreateOrderInput that = (OrderCreateOrderInput) o;
    return Objects.equals(billingAddress, that.billingAddress) &&
        Objects.equals(buyerAcceptsMarketing, that.buyerAcceptsMarketing) &&
        Objects.equals(closedAt, that.closedAt) &&
        Objects.equals(companyLocationId, that.companyLocationId) &&
        Objects.equals(currency, that.currency) &&
        Objects.equals(customAttributes, that.customAttributes) &&
        Objects.equals(discountCode, that.discountCode) &&
        Objects.equals(email, that.email) &&
        Objects.equals(financialStatus, that.financialStatus) &&
        Objects.equals(fulfillment, that.fulfillment) &&
        Objects.equals(fulfillmentStatus, that.fulfillmentStatus) &&
        Objects.equals(lineItems, that.lineItems) &&
        Objects.equals(metafields, that.metafields) &&
        Objects.equals(name, that.name) &&
        Objects.equals(note, that.note) &&
        Objects.equals(phone, that.phone) &&
        Objects.equals(poNumber, that.poNumber) &&
        Objects.equals(presentmentCurrency, that.presentmentCurrency) &&
        Objects.equals(processedAt, that.processedAt) &&
        Objects.equals(referringSite, that.referringSite) &&
        Objects.equals(shippingAddress, that.shippingAddress) &&
        Objects.equals(shippingLines, that.shippingLines) &&
        Objects.equals(sourceIdentifier, that.sourceIdentifier) &&
        Objects.equals(sourceName, that.sourceName) &&
        Objects.equals(sourceUrl, that.sourceUrl) &&
        Objects.equals(tags, that.tags) &&
        Objects.equals(taxesIncluded, that.taxesIncluded) &&
        Objects.equals(taxLines, that.taxLines) &&
        Objects.equals(test, that.test) &&
        Objects.equals(transactions, that.transactions) &&
        Objects.equals(userId, that.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, buyerAcceptsMarketing, closedAt, companyLocationId, currency, customAttributes, discountCode, email, financialStatus, fulfillment, fulfillmentStatus, lineItems, metafields, name, note, phone, poNumber, presentmentCurrency, processedAt, referringSite, shippingAddress, shippingLines, sourceIdentifier, sourceName, sourceUrl, tags, taxesIncluded, taxLines, test, transactions, userId);
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static class Builder {
    /**
     * The mailing address associated with the payment method. This address is an optional field that won't be
     *                available on orders that don't require a payment method.
     *   
     *               > Note:
     *               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
     *               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
     *               > then their name will be set to the first/last name from this address (if provided).
     */
    private MailingAddressInput billingAddress;

    /**
     * Whether the customer consented to receive email updates from the shop.
     */
    private Boolean buyerAcceptsMarketing = null;

    /**
     * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
     * when the order was closed. Returns null if the order isn't closed.
     */
    private OffsetDateTime closedAt;

    /**
     * The ID of the purchasing company's location for the order.
     */
    private String companyLocationId;

    /**
     * The shop-facing currency for the order. If not specified, then the shop's default currency is used.
     */
    private CurrencyCode currency;

    /**
     * A list of extra information that's added to the order. Appears in the
     * **Additional details** section of an order details page.
     */
    private List<OrderCreateCustomAttributeInput> customAttributes;

    /**
     * A discount code applied to the order.
     */
    private OrderCreateDiscountCodeInput discountCode;

    /**
     * A new customer email address for the order.
     *   
     *               > Note:
     *               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
     */
    private String email;

    /**
     * The financial status of the order. If not specified, then this will be derived
     * through the given transactions. Note that it's possible to specify a status
     * that doesn't match the given transactions and it will persist, but if an
     * operation later occurs on the order, the status may then be recalculated to
     * match the current state of transactions.
     */
    private OrderCreateFinancialStatus financialStatus;

    /**
     * The fulfillment to create for the order. This will apply to all line items.
     */
    private OrderCreateFulfillmentInput fulfillment;

    /**
     * The fulfillment status of the order. Will default to `unfulfilled` if not included.
     */
    private OrderCreateFulfillmentStatus fulfillmentStatus;

    /**
     * The line items to create for the order.
     */
    private List<OrderCreateLineItemInput> lineItems;

    /**
     * A list of metafields to add to the order.
     */
    private List<MetafieldInput> metafields;

    /**
     * The order name, generated by combining the `order_number` property with the
     * order prefix and suffix that are set in the merchant's [general
     * settings](https://www.shopify.com/admin/settings/general). This is different
     * from the `id` property, which is the ID of the order used by the API. This
     * field can also be set by the API to be any string value.
     */
    private String name;

    /**
     * The new contents for the note associated with the order.
     */
    private String note;

    /**
     * A new customer phone number for the order.
     */
    private String phone;

    /**
     * The purchase order number associated to this order.
     */
    private String poNumber;

    /**
     * The presentment currency that was used to display prices to the customer. This
     * must be specified if any presentment currencies are used in the order.
     */
    private CurrencyCode presentmentCurrency;

    /**
     * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
     * when an order was processed. This value is the date that appears on your
     * orders and that's used in the analytic reports. If you're importing orders
     * from an app or another platform, then you can set processed_at to a date and
     * time in the past to match when the original order was created.
     */
    private OffsetDateTime processedAt;

    /**
     * The website where the customer clicked a link to the shop.
     */
    private String referringSite;

    /**
     * The mailing address to where the order will be shipped.
     *   
     *               > Note:
     *               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
     *               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
     *               > then it will be set to the first/last name from this address (if provided).
     */
    private MailingAddressInput shippingAddress;

    /**
     * An array of objects, each of which details a shipping method used.
     */
    private List<OrderCreateShippingLineInput> shippingLines;

    /**
     * The ID of the order placed on the originating platform. This value doesn't
     * correspond to the Shopify ID that's generated from a completed draft.
     */
    private String sourceIdentifier;

    /**
     * The source of the checkout. To use this field for sales attribution, you must
     * register the channels that your app is managing. You can register the channels
     * that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
     * After you've submited your request, you need to wait for your request to be
     * processed by Shopify. You can find a list of your channels in the Partner
     * Dashboard, in your app's Marketplace extension. You can specify a handle as
     * the source_name value in your request.
     */
    private String sourceName;

    /**
     * A valid URL to the original order on the originating surface. This URL is
     * displayed to merchants on the Order Details page. If the URL is invalid, then
     * it won't be displayed.
     */
    private String sourceUrl;

    /**
     * A comma separated list of tags that have been added to the draft order.
     */
    private List<String> tags;

    /**
     * Whether taxes are included in the order subtotal.
     */
    private Boolean taxesIncluded = false;

    /**
     * An array of tax line objects, each of which details a tax applicable to the
     * order. When creating an order through the API, tax lines can be specified on
     * the order or the line items but not both. Tax lines specified on the order are
     * split across the _taxable_ line items in the created order.
     */
    private List<OrderCreateTaxLineInput> taxLines;

    /**
     * Whether this is a test order.
     */
    private Boolean test = false;

    /**
     * The payment transactions to create for the order.
     */
    private List<OrderCreateOrderTransactionInput> transactions;

    /**
     * The ID of the user logged into Shopify POS who processed the order, if applicable.
     */
    private String userId;

    public OrderCreateOrderInput build() {
      OrderCreateOrderInput result = new OrderCreateOrderInput();
      result.billingAddress = this.billingAddress;
      result.buyerAcceptsMarketing = this.buyerAcceptsMarketing;
      result.closedAt = this.closedAt;
      result.companyLocationId = this.companyLocationId;
      result.currency = this.currency;
      result.customAttributes = this.customAttributes;
      result.discountCode = this.discountCode;
      result.email = this.email;
      result.financialStatus = this.financialStatus;
      result.fulfillment = this.fulfillment;
      result.fulfillmentStatus = this.fulfillmentStatus;
      result.lineItems = this.lineItems;
      result.metafields = this.metafields;
      result.name = this.name;
      result.note = this.note;
      result.phone = this.phone;
      result.poNumber = this.poNumber;
      result.presentmentCurrency = this.presentmentCurrency;
      result.processedAt = this.processedAt;
      result.referringSite = this.referringSite;
      result.shippingAddress = this.shippingAddress;
      result.shippingLines = this.shippingLines;
      result.sourceIdentifier = this.sourceIdentifier;
      result.sourceName = this.sourceName;
      result.sourceUrl = this.sourceUrl;
      result.tags = this.tags;
      result.taxesIncluded = this.taxesIncluded;
      result.taxLines = this.taxLines;
      result.test = this.test;
      result.transactions = this.transactions;
      result.userId = this.userId;
      return result;
    }

    /**
     * The mailing address associated with the payment method. This address is an optional field that won't be
     *                available on orders that don't require a payment method.
     *   
     *               > Note:
     *               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
     *               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
     *               > then their name will be set to the first/last name from this address (if provided).
     */
    public Builder billingAddress(MailingAddressInput billingAddress) {
      this.billingAddress = billingAddress;
      return this;
    }

    /**
     * Whether the customer consented to receive email updates from the shop.
     */
    public Builder buyerAcceptsMarketing(Boolean buyerAcceptsMarketing) {
      this.buyerAcceptsMarketing = buyerAcceptsMarketing;
      return this;
    }

    /**
     * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
     * when the order was closed. Returns null if the order isn't closed.
     */
    public Builder closedAt(OffsetDateTime closedAt) {
      this.closedAt = closedAt;
      return this;
    }

    /**
     * The ID of the purchasing company's location for the order.
     */
    public Builder companyLocationId(String companyLocationId) {
      this.companyLocationId = companyLocationId;
      return this;
    }

    /**
     * The shop-facing currency for the order. If not specified, then the shop's default currency is used.
     */
    public Builder currency(CurrencyCode currency) {
      this.currency = currency;
      return this;
    }

    /**
     * A list of extra information that's added to the order. Appears in the
     * **Additional details** section of an order details page.
     */
    public Builder customAttributes(List<OrderCreateCustomAttributeInput> customAttributes) {
      this.customAttributes = customAttributes;
      return this;
    }

    /**
     * A discount code applied to the order.
     */
    public Builder discountCode(OrderCreateDiscountCodeInput discountCode) {
      this.discountCode = discountCode;
      return this;
    }

    /**
     * A new customer email address for the order.
     *   
     *               > Note:
     *               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
     */
    public Builder email(String email) {
      this.email = email;
      return this;
    }

    /**
     * The financial status of the order. If not specified, then this will be derived
     * through the given transactions. Note that it's possible to specify a status
     * that doesn't match the given transactions and it will persist, but if an
     * operation later occurs on the order, the status may then be recalculated to
     * match the current state of transactions.
     */
    public Builder financialStatus(OrderCreateFinancialStatus financialStatus) {
      this.financialStatus = financialStatus;
      return this;
    }

    /**
     * The fulfillment to create for the order. This will apply to all line items.
     */
    public Builder fulfillment(OrderCreateFulfillmentInput fulfillment) {
      this.fulfillment = fulfillment;
      return this;
    }

    /**
     * The fulfillment status of the order. Will default to `unfulfilled` if not included.
     */
    public Builder fulfillmentStatus(OrderCreateFulfillmentStatus fulfillmentStatus) {
      this.fulfillmentStatus = fulfillmentStatus;
      return this;
    }

    /**
     * The line items to create for the order.
     */
    public Builder lineItems(List<OrderCreateLineItemInput> lineItems) {
      this.lineItems = lineItems;
      return this;
    }

    /**
     * A list of metafields to add to the order.
     */
    public Builder metafields(List<MetafieldInput> metafields) {
      this.metafields = metafields;
      return this;
    }

    /**
     * The order name, generated by combining the `order_number` property with the
     * order prefix and suffix that are set in the merchant's [general
     * settings](https://www.shopify.com/admin/settings/general). This is different
     * from the `id` property, which is the ID of the order used by the API. This
     * field can also be set by the API to be any string value.
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * The new contents for the note associated with the order.
     */
    public Builder note(String note) {
      this.note = note;
      return this;
    }

    /**
     * A new customer phone number for the order.
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * The purchase order number associated to this order.
     */
    public Builder poNumber(String poNumber) {
      this.poNumber = poNumber;
      return this;
    }

    /**
     * The presentment currency that was used to display prices to the customer. This
     * must be specified if any presentment currencies are used in the order.
     */
    public Builder presentmentCurrency(CurrencyCode presentmentCurrency) {
      this.presentmentCurrency = presentmentCurrency;
      return this;
    }

    /**
     * The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format)
     * when an order was processed. This value is the date that appears on your
     * orders and that's used in the analytic reports. If you're importing orders
     * from an app or another platform, then you can set processed_at to a date and
     * time in the past to match when the original order was created.
     */
    public Builder processedAt(OffsetDateTime processedAt) {
      this.processedAt = processedAt;
      return this;
    }

    /**
     * The website where the customer clicked a link to the shop.
     */
    public Builder referringSite(String referringSite) {
      this.referringSite = referringSite;
      return this;
    }

    /**
     * The mailing address to where the order will be shipped.
     *   
     *               > Note:
     *               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
     *               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
     *               > then it will be set to the first/last name from this address (if provided).
     */
    public Builder shippingAddress(MailingAddressInput shippingAddress) {
      this.shippingAddress = shippingAddress;
      return this;
    }

    /**
     * An array of objects, each of which details a shipping method used.
     */
    public Builder shippingLines(List<OrderCreateShippingLineInput> shippingLines) {
      this.shippingLines = shippingLines;
      return this;
    }

    /**
     * The ID of the order placed on the originating platform. This value doesn't
     * correspond to the Shopify ID that's generated from a completed draft.
     */
    public Builder sourceIdentifier(String sourceIdentifier) {
      this.sourceIdentifier = sourceIdentifier;
      return this;
    }

    /**
     * The source of the checkout. To use this field for sales attribution, you must
     * register the channels that your app is managing. You can register the channels
     * that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
     * After you've submited your request, you need to wait for your request to be
     * processed by Shopify. You can find a list of your channels in the Partner
     * Dashboard, in your app's Marketplace extension. You can specify a handle as
     * the source_name value in your request.
     */
    public Builder sourceName(String sourceName) {
      this.sourceName = sourceName;
      return this;
    }

    /**
     * A valid URL to the original order on the originating surface. This URL is
     * displayed to merchants on the Order Details page. If the URL is invalid, then
     * it won't be displayed.
     */
    public Builder sourceUrl(String sourceUrl) {
      this.sourceUrl = sourceUrl;
      return this;
    }

    /**
     * A comma separated list of tags that have been added to the draft order.
     */
    public Builder tags(List<String> tags) {
      this.tags = tags;
      return this;
    }

    /**
     * Whether taxes are included in the order subtotal.
     */
    public Builder taxesIncluded(Boolean taxesIncluded) {
      this.taxesIncluded = taxesIncluded;
      return this;
    }

    /**
     * An array of tax line objects, each of which details a tax applicable to the
     * order. When creating an order through the API, tax lines can be specified on
     * the order or the line items but not both. Tax lines specified on the order are
     * split across the _taxable_ line items in the created order.
     */
    public Builder taxLines(List<OrderCreateTaxLineInput> taxLines) {
      this.taxLines = taxLines;
      return this;
    }

    /**
     * Whether this is a test order.
     */
    public Builder test(Boolean test) {
      this.test = test;
      return this;
    }

    /**
     * The payment transactions to create for the order.
     */
    public Builder transactions(List<OrderCreateOrderTransactionInput> transactions) {
      this.transactions = transactions;
      return this;
    }

    /**
     * The ID of the user logged into Shopify POS who processed the order, if applicable.
     */
    public Builder userId(String userId) {
      this.userId = userId;
      return this;
    }
  }
}
